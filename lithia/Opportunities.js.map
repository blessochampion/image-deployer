{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/constants.ts", "../src/utils/positionsCount.ts", "../src/utils/util.ts", "../src/utils/bindJobsToList.ts", "../src/utils/dropdown.ts", "../src/utils/dropdownCTA.ts", "../src/utils/WorkdayClient.ts", "../src/pages/Opportunities.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const prefix = 'data';\n\nexport const SELECTORS = {\n  positionsCount: `[${prefix}=positions-count]`,\n  viewOpportunities: `[${prefix}=view-opportunities]`,\n  usLoadAll: `[${prefix}=us-load-all-container]`,\n  count: `[${prefix}=count]`,\n  locationCount: `[${prefix}=location-count]`,\n  locationInput: `[${prefix}=location-input]`,\n  titleInput: `[${prefix}=title-input]`,\n  searchButton: `[${prefix}=search-btn]`,\n  name: `[${prefix}=name]`,\n  input: `[${prefix}=input]`,\n  checkbox: `[${prefix}=checkbox]`,\n  loadMore: `[${prefix}=load-more]`,\n  title: `[${prefix}=title]`,\n  time: `[${prefix}=time]`,\n  location: `[${prefix}=location]`,\n  description: `[${prefix}=description]`,\n  jobRequisitionId: `[${prefix}=job-requisition-id]`,\n  subCategory: (subCategory: string) => `[${prefix}-sub-category=\"${subCategory}\"]`,\n};\n\nexport const ATTRIBUTES = {\n  dataChecked: 'data-checked',\n  checkedClass: 'w--redirected-checked',\n};\n\nconst SALES = 'Sales';\nconst SERVICE = 'Service';\nconst OVERHEAD = 'Overhead';\nconst PARTS = 'Parts';\nexport const ALL_STORE_SUB_CATEGORIES = [SALES, SERVICE, OVERHEAD, PARTS];\n\nexport const URL_PARAMS_KEYS = {\n  location: 'location',\n};\n\nexport const ACCESSORS = {\n  location: (job: Job) => job.State || '',\n  title: (job: Job) => job.title || '',\n};\n\n// export const apiBaseUrl = 'http://127.0.0.1:49302/';\nexport const apiBaseUrl = 'https://cors-middleware.lithia.workers.dev/';\n", "import { SELECTORS } from './constants';\n\nexport const positionsCountMap = (\n  positionsCount: number,\n  suffix = '',\n  container = document.body\n) => {\n  const positionCountEls = container.querySelectorAll<HTMLElement>(SELECTORS.positionsCount);\n  positionCountEls.forEach((el) => {\n    el.textContent = positionsCount.toLocaleString() + suffix;\n  });\n};\n", "export type JobByTypes = {\n  [key: string]: Job[];\n};\n\n/**\n * Group jobs by state\n * @param jobs\n * @returns\n */\nexport const groupJobByState = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'State');\n};\n\n/**\n * Group jobs by middle category\n * @param jobs\n * @returns grouped jobs by middle category\n */\nexport const groupJobByMiddleCategory = (jobs: Job[]): JobByTypes => {\n  const jobsByLowerCategory = groupJobByLowerCategory(jobs);\n  const subcategories: JobByTypes = {\n    Sales: [...(jobsByLowerCategory['Sales'] || [])],\n    Service: [...(jobsByLowerCategory['Service'] || [])],\n    Parts: [...(jobsByLowerCategory['Parts'] || [])],\n    Overhead: [\n      ...(jobsByLowerCategory['Operations'] || []),\n      ...(jobsByLowerCategory['Administrative'] || []),\n      ...(jobsByLowerCategory['Marketing'] || []),\n      ...(jobsByLowerCategory['Customer Service'] || []),\n    ],\n    Driveway: [\n      ...(jobsByLowerCategory['Body Shop'] || []),\n      ...(jobsByLowerCategory['Analytics'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n    ],\n    'Driveway Finance': [...(jobsByLowerCategory['Finance/Accounting'] || [])],\n    'Lithia Corporate': [\n      ...(jobsByLowerCategory['Information Technology & Digital Innovation'] || []),\n      ...(jobsByLowerCategory['Human Resources'] || []),\n    ],\n  };\n\n  return subcategories;\n};\n\n/**\n * Group jobs by category\n * @param jobs\n * @returns grouped jobs by lower category\n */\nexport const groupJobByLowerCategory = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'EE_Categories_lower_level');\n};\n\n/**\n *\n * @param jobs to be grouped\n * @param groupKey key of the job object to group by\n * @returns grouped jobs\n */\nconst filterAndGroupJobs = (jobs: Job[], groupKey: keyof Job): JobByTypes => {\n  const groupedJobs: JobByTypes = {};\n  const jobsWithKeyPresent = jobs.filter((job) => job[groupKey]);\n\n  jobsWithKeyPresent.forEach((job) => {\n    const keyValue = job[groupKey] || '';\n    if (!groupedJobs[keyValue]) {\n      groupedJobs[keyValue] = [];\n    }\n    groupedJobs[keyValue].push(job);\n  });\n  return groupedJobs;\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique locations\n */\nexport const getLocations = (jobs: Job[]): string[] => {\n  const allLocations = jobs.filter((job) => job.State).map((job) => job.State || '');\n\n  return Array.from(new Set(allLocations)).sort();\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique Job titles\n */\nexport const getJobTitles = (jobs: Job[]): string[] => {\n  const jobTitles = jobs.filter((job) => job.title).map((job) => job.title || '');\n\n  return Array.from(new Set(jobTitles)).sort();\n};\n\n/**\n *\n * @param params query params to be set\n */\nexport const setQueryParams = (params: { [key: string]: string }): void => {\n  const url = new URL(window.location.href);\n  const queryString = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) continue;\n    queryString.set(key, value);\n  }\n\n  url.search = queryString.toString();\n\n  window.history.pushState({}, '', url.href);\n};\n\n/**\n *\n * @param input string to truncate\n * @param max max length of the string\n * @returns truncated string\n */\nexport const truncate = (input: string, max: number = 100) => {\n  if (input.length > 100) {\n    return input.substring(0, max) + '...';\n  }\n  return input;\n};\n", "import { SELECTORS } from './constants';\nimport { positionsCountMap } from './positionsCount';\nimport { truncate } from './util';\n\nexport const bindJobsToList = (jobs: Job[]) => {\n  // sort jobs by title\n  jobs.sort((a, b) => (a.title || '').localeCompare(b.title || ''));\n\n  positionsCountMap(jobs.length, ' opportunities');\n\n  const list = document.getElementById('jobs-component') as HTMLElement;\n  const jobTemplate = window.jobTemplate || (list.childNodes[0].cloneNode(true) as HTMLElement);\n  jobTemplate.style.display = 'none';\n\n  const parser = new DOMParser();\n\n  const container = $('#jobs-component').parent();\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  container.pagination({\n    dataSource: jobs,\n    pageSize: 10,\n    activeClassName: 'active-nav',\n    inlineStyle: false,\n    callback: function (data: Job[]) {\n      list.innerHTML = '';\n      data.forEach((job) => {\n        const template = jobTemplate.cloneNode(true) as HTMLElement;\n\n        template.style.display = 'block';\n        list.appendChild(template);\n        const { title, jobDescription, timeType, State, City, jobRequisitionId } = job;\n\n        const titleElement = template.querySelector(SELECTORS.title);\n        if (titleElement) titleElement.innerHTML = title || '';\n\n        const descriptionElement = template.querySelector(SELECTORS.description);\n        if (descriptionElement) {\n          descriptionElement.innerHTML = truncate(\n            parser.parseFromString(jobDescription || '', 'text/html').body.innerText\n          );\n        }\n\n        const jobTimeElement = template.querySelector(SELECTORS.time);\n        if (jobTimeElement) {\n          jobTimeElement.innerHTML = timeType || '';\n        }\n\n        const locationNameEl = template.querySelector(SELECTORS.location);\n        if (locationNameEl) {\n          locationNameEl.innerHTML = `${City || ''} ${State ? ',' : ''} ${State || ''}`;\n        }\n\n        template.addEventListener('click', () => {\n          window.location.href = `${window.location.origin}/listing?id=${jobRequisitionId}`;\n        });\n      });\n    },\n  });\n};\n", "import { ATTRIBUTES, SELECTORS } from './constants';\n\nexport class Dropdown {\n  private searchInput: HTMLInputElement | undefined;\n  private listItem: HTMLDivElement | undefined;\n  private searchItems: HTMLDivElement[] = [];\n  constructor(\n    private container: HTMLDivElement,\n    private data: string[]\n  ) {\n    this.bindData();\n  }\n\n  /**\n   *\n   * @returns the selected items\n   */\n  public getSelectedItems(): string[] {\n    return this.searchItems\n      .filter((searchItem) => searchItem.hasAttribute(ATTRIBUTES.dataChecked))\n      .map((searchItem) => {\n        const textElement = searchItem.querySelector(SELECTORS.name);\n        return textElement?.textContent || '';\n      });\n  }\n\n  public filterJobs(jobs: Job[], accessor: (job: Job) => string): Job[] {\n    const selectedItems = this.getSelectedItems();\n    if (selectedItems.length === 0) return jobs;\n    return jobs.filter((job) => selectedItems.includes(accessor(job) || ''));\n  }\n\n  public reset() {\n    this.searchItems.forEach((searchItem) => {\n      searchItem.removeAttribute(ATTRIBUTES.dataChecked);\n      // remove the checked class 'w--redirected-checked'\n      const div = searchItem.querySelector('div');\n      if (div) div.classList.remove(ATTRIBUTES.checkedClass);\n    });\n  }\n\n  private bindData() {\n    const [inputContainer, listItemTemplate] = this.container.childNodes;\n\n    // remove all elements after the template\n    while (this.container.childNodes.length > 1) {\n      const node = this.container.lastChild;\n      if (node) this.container.removeChild(node);\n    }\n\n    if (!inputContainer || !listItemTemplate) return;\n    this.searchInput = (inputContainer as HTMLElement).querySelector('input') as HTMLInputElement;\n    this.generateListItems(listItemTemplate);\n    this.handleSearch();\n  }\n\n  /**\n   * Generates the list items based on the data\n   * @param listItemTemplate\n   */\n  private generateListItems(listItemTemplate: ChildNode) {\n    this.listItem = listItemTemplate.cloneNode(true) as HTMLDivElement;\n\n    this.data.forEach((item) => {\n      const searchItem = this.createListItem();\n      if (!searchItem) return;\n\n      const textElement = searchItem.querySelector(SELECTORS.name);\n      if (textElement) textElement.textContent = item;\n\n      this.handleItemClick(searchItem);\n\n      this.container.appendChild(searchItem);\n      this.searchItems.push(searchItem);\n    });\n  }\n\n  /**\n   *  Responsible for handling the click event on the list item\n   * @param searchItem - the list item\n   */\n  private handleItemClick(searchItem: HTMLDivElement) {\n    searchItem.addEventListener('click', (event: MouseEvent) => {\n      const div = searchItem.querySelector('div');\n      let isChecked = false;\n      if (div) {\n        isChecked = !div.classList.contains(ATTRIBUTES.checkedClass);\n\n        if (isChecked) {\n          searchItem.setAttribute(ATTRIBUTES.dataChecked, isChecked.toString());\n        } else {\n          searchItem.removeAttribute(ATTRIBUTES.dataChecked);\n        }\n      }\n      event.stopPropagation();\n    });\n  }\n\n  /**\n   *  Responsible for creating a cloned list item\n   * @returns a cloned list item\n   */\n  private createListItem() {\n    if (!this.searchInput || !this.listItem) return;\n    const searchItem = this.listItem.cloneNode(true) as HTMLDivElement;\n    return searchItem;\n  }\n\n  /**\n   * Responsible for handling the search functionality\n   * @returns\n   */\n  private handleSearch() {\n    if (!this.searchInput) return;\n\n    this.searchInput.addEventListener('click', (event) => {\n      event.stopPropagation();\n    });\n\n    /**\n     * This event listener is responsible for filtering the list items based on the search\n     */\n    this.searchInput.addEventListener('input', () => {\n      const searchValue = this.searchInput?.value.toLowerCase();\n      this.searchItems.forEach((searchItem) => {\n        if (!searchValue) {\n          searchItem.style.display = 'block';\n          return;\n        }\n\n        const textElement = searchItem.querySelector(SELECTORS.name);\n        if (textElement) {\n          const text = textElement.textContent?.toLowerCase();\n          if (text && text.includes(searchValue || '')) {\n            searchItem.style.display = 'block';\n          } else {\n            searchItem.style.display = 'none';\n          }\n        }\n      });\n    });\n  }\n}\n", "import { ACCESSORS, SELECTORS } from './constants';\nimport { Dropdown } from './dropdown';\nimport { getJobTitles, getLocations } from './util';\n\nexport const dropdownCTAs = (\n  jobs: Job[],\n  onSearchBtnClicked: (\n    jobs: Job[],\n    selections: {\n      selectedLocations: string[];\n      selectedTitles: string[];\n    }\n  ) => void\n) => {\n  // Location search\n  const locationSearch = document.querySelector<HTMLDivElement>(SELECTORS.locationInput);\n  const locations = getLocations(jobs);\n  let locationDropdown: Dropdown | undefined;\n  if (locationSearch && locations) {\n    locationDropdown = new Dropdown(locationSearch, locations);\n  }\n\n  // Job title search\n  const jobTitleSearch = document.querySelector<HTMLDivElement>(SELECTORS.titleInput);\n  const jobTitles = getJobTitles(jobs);\n  let titleDropdown: Dropdown | undefined;\n  if (jobTitleSearch && jobTitles) {\n    titleDropdown = new Dropdown(jobTitleSearch, jobTitles);\n  }\n\n  // Filter jobs based on selected locations and titles\n  const filterJobs = (jobs: Job[]) => {\n    let filteredJobs = jobs;\n    if (locationDropdown) {\n      filteredJobs = locationDropdown.filterJobs(filteredJobs, ACCESSORS.location);\n    }\n    if (titleDropdown) {\n      filteredJobs = titleDropdown.filterJobs(filteredJobs, ACCESSORS.title);\n    }\n    return filteredJobs;\n  };\n\n  // Search button\n  const searchButton = document.querySelector<HTMLButtonElement>(SELECTORS.searchButton);\n  if (searchButton) {\n    searchButton.addEventListener('click', () => {\n      const selectedLocations = locationDropdown?.getSelectedItems() || [];\n      const selectedTitles = titleDropdown?.getSelectedItems() || [];\n      onSearchBtnClicked(filterJobs(jobs), { selectedLocations, selectedTitles });\n    });\n  }\n};\n", "import { apiBaseUrl } from './constants';\n\nexport class WorkdayClient {\n  private jobs: Job[] | null;\n  constructor() {\n    this.jobs = null;\n  }\n\n  public async fetchJobs(): Promise<Job[] | null> {\n    if (this.jobs) {\n      return Promise.resolve(this.jobs);\n    }\n    const { Report_Entry } = (await this.fetchJobsFromAPI()) || {};\n    if (Report_Entry) {\n      this.jobs = Report_Entry;\n    }\n\n    return Promise.resolve(this.jobs);\n  }\n\n  private async fetchJobsFromAPI(): Promise<JobResponse | null> {\n    try {\n      const response = await fetch(`${apiBaseUrl}jobs`);\n      const jobs = await response.json();\n\n      return jobs;\n    } catch (error) {\n      console.error('Error fetching jobs', error);\n      return null;\n    }\n  }\n}\n", "import { bindJobsToList } from '$utils/bindJobsToList';\nimport { dropdownCTAs } from '$utils/dropdownCTA';\nimport { setQueryParams } from '$utils/util';\nimport { WorkdayClient } from '$utils/WorkdayClient';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  const workdayClient = new WorkdayClient();\n\n  const jobs = await workdayClient.fetchJobs();\n\n  if (jobs) {\n    dropdownCTAs(jobs, (filteredJobs, selections) => {\n      const { selectedLocations, selectedTitles } = selections;\n\n      setQueryParams({\n        location: selectedLocations.join(','),\n        title: selectedTitles.join(','),\n      });\n\n      bindJobsToList(filteredJobs);\n    });\n\n    bindJobsToList(jobs);\n    return;\n  }\n  console.error('Error fetching jobs');\n});\n"],
  "mappings": "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",
  "names": ["jobs"]
}
