{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/constants.ts", "../src/utils/WorkdayClient.ts", "../src/utils/buttons.ts", "../src/utils/util.ts", "../src/utils/jobsByLowerCategory.ts", "../src/utils/positionsCount.ts", "../src/utils/usLoadMore.ts", "../src/utils/viewOpportunitiesBtn.ts", "../src/pages/Work.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const prefix = 'data';\n\nexport const SELECTORS = {\n  positionsCount: `[${prefix}=positions-count]`,\n  viewOpportunities: `[${prefix}=view-opportunities]`,\n  usLoadAll: `[${prefix}=us-load-all-container]`,\n  count: `[${prefix}=count]`,\n  locationCount: `[${prefix}=location-count]`,\n  locationInput: `[${prefix}=location-input]`,\n  titleInput: `[${prefix}=title-input]`,\n  searchButton: `[${prefix}=search-btn]`,\n  name: `[${prefix}=name]`,\n  input: `[${prefix}=input]`,\n  checkbox: `[${prefix}=checkbox]`,\n  loadMore: `[${prefix}=load-more]`,\n  title: `[${prefix}=title]`,\n  time: `[${prefix}=time]`,\n  location: `[${prefix}=location]`,\n  description: `[${prefix}=description]`,\n  jobRequisitionId: `[${prefix}=job-requisition-id]`,\n  subCategory: (subCategory: string) => `[${prefix}-sub-category=\"${subCategory}\"]`,\n};\n\nexport const ATTRIBUTES = {\n  dataChecked: 'data-checked',\n  checkedClass: 'w--redirected-checked',\n};\n\nconst SALES = 'Sales';\nconst SERVICE = 'Service';\nconst OVERHEAD = 'Overhead';\nconst PARTS = 'Parts';\nexport const ALL_STORE_SUB_CATEGORIES = [SALES, SERVICE, OVERHEAD, PARTS];\n\nexport const URL_PARAMS_KEYS = {\n  location: 'location',\n};\n\nexport const ACCESSORS = {\n  location: (job: Job) => job.State || '',\n  title: (job: Job) => job.title || '',\n};\n\n// export const apiBaseUrl = 'http://127.0.0.1:49302/';\nexport const apiBaseUrl = 'https://cors-middleware.lithia.workers.dev/';\n", "import { apiBaseUrl } from './constants';\n\nexport class WorkdayClient {\n  private jobs: Job[] | null;\n  constructor() {\n    this.jobs = null;\n  }\n\n  public async fetchJobs(): Promise<Job[] | null> {\n    if (this.jobs) {\n      return Promise.resolve(this.jobs);\n    }\n    const { Report_Entry } = (await this.fetchJobsFromAPI()) || {};\n    if (Report_Entry) {\n      this.jobs = Report_Entry;\n    }\n\n    return Promise.resolve(this.jobs);\n  }\n\n  private async fetchJobsFromAPI(): Promise<JobResponse | null> {\n    try {\n      const response = await fetch(`${apiBaseUrl}jobs`);\n      const jobs = await response.json();\n\n      return jobs;\n    } catch (error) {\n      console.error('Error fetching jobs', error);\n      return null;\n    }\n  }\n}\n", "import { ALL_STORE_SUB_CATEGORIES } from './constants';\n\nexport const listenForPopupOpportunitiesBtnClick = () => {\n  const popupContents = document.querySelectorAll(\n    '.popup_content a'\n  ) as NodeListOf<HTMLAnchorElement>;\n  popupContents.forEach((element) => {\n    const text = element.textContent || '';\n    let [category] = text.split('Opportunities');\n    category = category.trim();\n    let href = '/opportunities';\n    if (category === 'View') {\n      href = '/opportunities?category=Corporate';\n    } else {\n      const group = ALL_STORE_SUB_CATEGORIES.includes(category) ? 'Store' : 'Corporate';\n      href += '?subcategory=' + category + '&category=' + group;\n    }\n    element.setAttribute('href', href);\n  });\n};\n", "export type JobByTypes = {\n  [key: string]: Job[];\n};\n\n/**\n * Group jobs by state\n * @param jobs\n * @returns\n */\nexport const groupJobByState = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'State');\n};\n\n/**\n * Group jobs by middle category\n * @param jobs\n * @returns grouped jobs by middle category\n */\nexport const groupJobByMiddleCategory = (jobs: Job[]): JobByTypes => {\n  const jobsByLowerCategory = groupJobByLowerCategory(jobs);\n  const subcategories: JobByTypes = {\n    Sales: [...(jobsByLowerCategory['Sales'] || [])],\n    Service: [...(jobsByLowerCategory['Service'] || [])],\n    Parts: [...(jobsByLowerCategory['Parts'] || [])],\n    Overhead: [\n      ...(jobsByLowerCategory['Operations'] || []),\n      ...(jobsByLowerCategory['Administrative'] || []),\n      ...(jobsByLowerCategory['Marketing'] || []),\n      ...(jobsByLowerCategory['Customer Service'] || []),\n    ],\n    Driveway: [\n      ...(jobsByLowerCategory['Body Shop'] || []),\n      ...(jobsByLowerCategory['Analytics'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n    ],\n    'Driveway Finance': [...(jobsByLowerCategory['Finance/Accounting'] || [])],\n    'Lithia Corporate': [\n      ...(jobsByLowerCategory['Information Technology & Digital Innovation'] || []),\n      ...(jobsByLowerCategory['Human Resources'] || []),\n    ],\n  };\n\n  return subcategories;\n};\n\n/**\n * Group jobs by category\n * @param jobs\n * @returns grouped jobs by lower category\n */\nexport const groupJobByLowerCategory = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'EE_Categories_lower_level');\n};\n\n/**\n *\n * @param jobs to be grouped\n * @param groupKey key of the job object to group by\n * @returns grouped jobs\n */\nconst filterAndGroupJobs = (jobs: Job[], groupKey: keyof Job): JobByTypes => {\n  const groupedJobs: JobByTypes = {};\n  const jobsWithKeyPresent = jobs.filter((job) => job[groupKey]);\n\n  jobsWithKeyPresent.forEach((job) => {\n    const keyValue = job[groupKey] || '';\n    if (!groupedJobs[keyValue]) {\n      groupedJobs[keyValue] = [];\n    }\n    groupedJobs[keyValue].push(job);\n  });\n  return groupedJobs;\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique locations\n */\nexport const getLocations = (jobs: Job[]): string[] => {\n  const allLocations = jobs.filter((job) => job.State).map((job) => job.State || '');\n\n  return Array.from(new Set(allLocations)).sort();\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique Job titles\n */\nexport const getJobTitles = (jobs: Job[]): string[] => {\n  const jobTitles = jobs.filter((job) => job.title).map((job) => job.title || '');\n\n  return Array.from(new Set(jobTitles)).sort();\n};\n\n/**\n *\n * @param params query params to be set\n */\nexport const setQueryParams = (params: { [key: string]: string }): void => {\n  const url = new URL(window.location.href);\n  const queryString = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) continue;\n    queryString.set(key, value);\n  }\n\n  url.search = queryString.toString();\n\n  window.history.pushState({}, '', url.href);\n};\n\n/**\n *\n * @param input string to truncate\n * @param max max length of the string\n * @returns truncated string\n */\nexport const truncate = (input: string, max: number = 100) => {\n  if (input.length > 100) {\n    return input.substring(0, max) + '...';\n  }\n  return input;\n};\n", "import { SELECTORS } from './constants';\nimport { groupJobByMiddleCategory, groupJobByState } from './util';\n\nexport const jobsByLowerCategory = (jobs: Job[]) => {\n  const subcategories = groupJobByMiddleCategory(jobs);\n\n  Object.keys(subcategories).forEach((category) => {\n    const jobs = subcategories[category];\n    const jobByState = groupJobByState(jobs);\n    const locationCount = Object.keys(jobByState).length;\n\n    const container = document.querySelector(SELECTORS.subCategory(category));\n    if (container) {\n      const countEl = container.querySelector(SELECTORS.count);\n      if (countEl) countEl.textContent = jobs.length.toString();\n\n      const locationCountEl = container.querySelector(SELECTORS.locationCount);\n      if (locationCountEl) locationCountEl.textContent = locationCount.toString();\n    }\n  });\n};\n", "import { SELECTORS } from './constants';\n\nexport const positionsCountMap = (\n  positionsCount: number,\n  suffix = '',\n  container = document.body\n) => {\n  const positionCountEls = container.querySelectorAll<HTMLElement>(SELECTORS.positionsCount);\n  positionCountEls.forEach((el) => {\n    el.textContent = positionsCount.toLocaleString() + suffix;\n  });\n};\n", "import { SELECTORS } from './constants';\nimport { groupJobByState } from './util';\n\n/**\n *\n * @param jobs list of jobs to be grouped by state and displayed\n */\nexport const usLoadMore = (jobs: Job[]) => {\n  const jobsByState = groupJobByState(jobs);\n\n  const container = document.querySelector<HTMLDListElement>(SELECTORS.usLoadAll);\n  if (!container) return;\n\n  const template = container.childNodes[0].cloneNode(true);\n  if (!template) return;\n\n  const {\n    style: { display },\n  } = template as HTMLElement;\n\n  const maxChildNode = 6;\n\n  bindData(container, jobsByState, template, maxChildNode);\n\n  const loadMoreButton = document.querySelector<HTMLAnchorElement>(SELECTORS.loadMore);\n  if (!loadMoreButton) return;\n\n  handleLoadMoreClick(loadMoreButton, container, maxChildNode, display);\n};\n\n/**\n * Create a new template for each state and bind the data\n * @param container  is the cotainer element\n * @param jobsByState  is the object with the jobs grouped by state\n * @param template is the item template\n */\nconst bindData = (\n  container: HTMLDListElement,\n  jobsByState: { [key: string]: Job[] },\n  template: Node,\n  maxChildNode = 6\n) => {\n  container.innerHTML = '';\n\n  const entries = Object.entries(jobsByState);\n  entries.sort(([stateA], [stateB]) => stateA.localeCompare(stateB));\n\n  entries.forEach(([state, stateJobs], index) => {\n    const newTemplate = template.cloneNode(true) as HTMLElement;\n\n    const countEl = newTemplate.querySelector(SELECTORS.count);\n    const nameEl = newTemplate.querySelector(SELECTORS.name);\n\n    if (countEl) countEl.innerHTML = `${stateJobs.length}`;\n    if (nameEl) nameEl.innerHTML = state;\n\n    container.appendChild(newTemplate);\n\n    if (index >= maxChildNode) {\n      newTemplate.style.display = 'none';\n    }\n  });\n};\n\n/**\n *\n * @param loadMoreButton is the button that will trigger the load more action\n * @param container is the container element for the list of states\n * @param maxChildNode is the number of child nodes displayed before load more button is clicked\n * @param display is the default display of the child nodes template\n */\nconst handleLoadMoreClick = (\n  loadMoreButton: HTMLAnchorElement,\n  container: HTMLDListElement,\n  maxChildNode: number,\n  display: string\n) => {\n  loadMoreButton.addEventListener('click', (e) => {\n    e.preventDefault();\n\n    const action = loadMoreButton.getAttribute('action');\n\n    if (action === 'load-less') {\n      loadMoreButton.setAttribute('action', 'load-all');\n      container.childNodes.forEach((element, index) => {\n        if (index >= maxChildNode) {\n          (element as HTMLElement).style.display = 'none';\n        }\n      });\n      loadMoreButton.textContent = 'Load All';\n      container.scrollIntoView();\n    } else {\n      container.childNodes.forEach((element) => {\n        (element as HTMLElement).style.display = display;\n      });\n      loadMoreButton.setAttribute('action', 'load-less');\n      loadMoreButton.textContent = 'Load Less';\n    }\n  });\n};\n", "import { SELECTORS } from './constants';\n\nexport const viewOpportunitiesBtn = (container = document.body) => {\n  const positionCountEls = container.querySelectorAll<HTMLElement>(SELECTORS.viewOpportunities);\n  positionCountEls.forEach((el) => {\n    el.addEventListener('click', (evt) => {\n      const currentTarget = evt.currentTarget as HTMLElement;\n      const query = currentTarget.getAttribute('data-query') || '';\n      window.open(`${window.location.origin}/opportunities${query}`, '_blank');\n    });\n  });\n};\n", "import { WorkdayClient } from '$utils/WorkdayClient';\nimport { listenForPopupOpportunitiesBtnClick } from '$utils/buttons';\nimport { jobsByLowerCategory } from '$utils/jobsByLowerCategory';\nimport { positionsCountMap } from '$utils/positionsCount';\nimport { usLoadMore } from '$utils/usLoadMore';\nimport { viewOpportunitiesBtn } from '$utils/viewOpportunitiesBtn';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  const workdayClient = new WorkdayClient();\n  const jobs = await workdayClient.fetchJobs();\n\n  if (jobs) {\n    positionsCountMap(jobs.length);\n    usLoadMore(jobs);\n    jobsByLowerCategory(jobs);\n    viewOpportunitiesBtn();\n    listenForPopupOpportunitiesBtnClick();\n  } else {\n    console.error('Error fetching jobs');\n  }\n});\n"],
  "mappings": "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",
  "names": ["jobsByLowerCategory", "jobs"]
}
