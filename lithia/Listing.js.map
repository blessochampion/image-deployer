{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/constants.ts", "../src/utils/util.ts", "../src/utils/WorkdayClient.ts", "../src/pages/Listing.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const prefix = 'data';\n\nexport const SELECTORS = {\n  positionsCount: `[${prefix}=positions-count]`,\n  viewOpportunities: `[${prefix}=view-opportunities]`,\n  usLoadAll: `[${prefix}=us-load-all-container]`,\n  count: `[${prefix}=count]`,\n  locationCount: `[${prefix}=location-count]`,\n  locationInput: `[${prefix}=location-input]`,\n  titleInput: `[${prefix}=title-input]`,\n  searchButton: `[${prefix}=search-btn]`,\n  name: `[${prefix}=name]`,\n  input: `[${prefix}=input]`,\n  checkbox: `[${prefix}=checkbox]`,\n  loadMore: `[${prefix}=load-more]`,\n  title: `[${prefix}=title]`,\n  time: `[${prefix}=time]`,\n  location: `[${prefix}=location]`,\n  description: `[${prefix}=description]`,\n  jobRequisitionId: `[${prefix}=job-requisition-id]`,\n  subCategory: (subCategory: string) => `[${prefix}-sub-category=\"${subCategory}\"]`,\n};\n\nexport const ATTRIBUTES = {\n  dataChecked: 'data-checked',\n  checkedClass: 'w--redirected-checked',\n};\n\nconst SALES = 'Sales';\nconst SERVICE = 'Service';\nconst OVERHEAD = 'Overhead';\nconst PARTS = 'Parts';\nexport const ALL_STORE_SUB_CATEGORIES = [SALES, SERVICE, OVERHEAD, PARTS];\n\nexport const URL_PARAMS_KEYS = {\n  location: 'location',\n};\n\nexport const ACCESSORS = {\n  location: (job: Job) => job.State || '',\n  title: (job: Job) => job.title || '',\n};\n\n// export const apiBaseUrl = 'http://127.0.0.1:49302/';\nexport const apiBaseUrl = 'https://cors-middleware.lithia.workers.dev/';\n", "export type JobByTypes = {\n  [key: string]: Job[];\n};\n\n/**\n * Group jobs by state\n * @param jobs\n * @returns\n */\nexport const groupJobByState = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'State');\n};\n\n/**\n * Group jobs by middle category\n * @param jobs\n * @returns grouped jobs by middle category\n */\nexport const groupJobByMiddleCategory = (jobs: Job[]): JobByTypes => {\n  const jobsByLowerCategory = groupJobByLowerCategory(jobs);\n  const subcategories: JobByTypes = {\n    Sales: [...(jobsByLowerCategory['Sales'] || [])],\n    Service: [...(jobsByLowerCategory['Service'] || [])],\n    Parts: [...(jobsByLowerCategory['Parts'] || [])],\n    Overhead: [\n      ...(jobsByLowerCategory['Operations'] || []),\n      ...(jobsByLowerCategory['Administrative'] || []),\n      ...(jobsByLowerCategory['Marketing'] || []),\n      ...(jobsByLowerCategory['Customer Service'] || []),\n    ],\n    Driveway: [\n      ...(jobsByLowerCategory['Body Shop'] || []),\n      ...(jobsByLowerCategory['Analytics'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n      ...(jobsByLowerCategory['Real Estate'] || []),\n    ],\n    'Driveway Finance': [...(jobsByLowerCategory['Finance/Accounting'] || [])],\n    'Lithia Corporate': [\n      ...(jobsByLowerCategory['Information Technology & Digital Innovation'] || []),\n      ...(jobsByLowerCategory['Human Resources'] || []),\n    ],\n  };\n\n  return subcategories;\n};\n\n/**\n * Group jobs by category\n * @param jobs\n * @returns grouped jobs by lower category\n */\nexport const groupJobByLowerCategory = (jobs: Job[]): JobByTypes => {\n  return filterAndGroupJobs(jobs, 'EE_Categories_lower_level');\n};\n\n/**\n *\n * @param jobs to be grouped\n * @param groupKey key of the job object to group by\n * @returns grouped jobs\n */\nconst filterAndGroupJobs = (jobs: Job[], groupKey: keyof Job): JobByTypes => {\n  const groupedJobs: JobByTypes = {};\n  const jobsWithKeyPresent = jobs.filter((job) => job[groupKey]);\n\n  jobsWithKeyPresent.forEach((job) => {\n    const keyValue = job[groupKey] || '';\n    if (!groupedJobs[keyValue]) {\n      groupedJobs[keyValue] = [];\n    }\n    groupedJobs[keyValue].push(job);\n  });\n  return groupedJobs;\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique locations\n */\nexport const getLocations = (jobs: Job[]): string[] => {\n  const allLocations = jobs.filter((job) => job.State).map((job) => job.State || '');\n\n  return Array.from(new Set(allLocations)).sort();\n};\n\n/**\n *\n * @param jobs list of jobs\n * @returns sorted list of unique Job titles\n */\nexport const getJobTitles = (jobs: Job[]): string[] => {\n  const jobTitles = jobs.filter((job) => job.title).map((job) => job.title || '');\n\n  return Array.from(new Set(jobTitles)).sort();\n};\n\n/**\n *\n * @param params query params to be set\n */\nexport const setQueryParams = (params: { [key: string]: string }): void => {\n  const url = new URL(window.location.href);\n  const queryString = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) continue;\n    queryString.set(key, value);\n  }\n\n  url.search = queryString.toString();\n\n  window.history.pushState({}, '', url.href);\n};\n\n/**\n *\n * @param input string to truncate\n * @param max max length of the string\n * @returns truncated string\n */\nexport const truncate = (input: string, max: number = 100) => {\n  if (input.length > 100) {\n    return input.substring(0, max) + '...';\n  }\n  return input;\n};\n", "import { apiBaseUrl } from './constants';\n\nexport class WorkdayClient {\n  private jobs: Job[] | null;\n  constructor() {\n    this.jobs = null;\n  }\n\n  public async fetchJobs(): Promise<Job[] | null> {\n    if (this.jobs) {\n      return Promise.resolve(this.jobs);\n    }\n    const { Report_Entry } = (await this.fetchJobsFromAPI()) || {};\n    if (Report_Entry) {\n      this.jobs = Report_Entry;\n    }\n\n    return Promise.resolve(this.jobs);\n  }\n\n  private async fetchJobsFromAPI(): Promise<JobResponse | null> {\n    try {\n      const response = await fetch(`${apiBaseUrl}jobs`);\n      const jobs = await response.json();\n\n      return jobs;\n    } catch (error) {\n      console.error('Error fetching jobs', error);\n      return null;\n    }\n  }\n}\n", "import { SELECTORS } from '$utils/constants';\nimport { groupJobByState, truncate } from '$utils/util';\nimport { WorkdayClient } from '$utils/WorkdayClient';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  const workdayClient = new WorkdayClient();\n  const jobs = await workdayClient.fetchJobs();\n\n  if (jobs) {\n    const queryString = window.location.search;\n    const parameters = new URLSearchParams(queryString);\n    const id = parameters.get('id');\n    if (!id) {\n      console.error('Error fetching job id');\n      return;\n    }\n    const job = jobs.find((job) => job.jobRequisitionId === id);\n    if (!job) {\n      console.error('Error fetching job');\n      return;\n    }\n    const { title, timeType, jobDescription, jobRequisitionId, City, State } = job;\n    // title\n    const titleElement = document.querySelector(SELECTORS.title);\n    if (titleElement) titleElement.innerHTML = title || '';\n\n    // time\n    const timeElement = document.querySelector(SELECTORS.time);\n    if (timeElement) timeElement.innerHTML = timeType || '';\n\n    // location\n    const locationElement = document.querySelector(SELECTORS.location);\n    if (locationElement)\n      locationElement.innerHTML = `${City || ''} ${State ? ',' : ''} ${State || ''}`;\n\n    // description\n    const descriptionElement = document.querySelector(SELECTORS.description);\n    if (descriptionElement) descriptionElement.innerHTML = jobDescription || '';\n\n    // jobRequisitionId\n    const jobRequisitionIdElement = document.querySelector(SELECTORS.jobRequisitionId);\n    if (jobRequisitionIdElement) jobRequisitionIdElement.innerHTML = jobRequisitionId || '';\n\n    const applyNowBtns = document.querySelectorAll('.apply-now-btn') as NodeListOf<HTMLElement>;\n    applyNowBtns.forEach((button: HTMLElement) => {\n      button.addEventListener('click', () => {\n        window.open(job.External_Apply_URL, '_blank');\n      });\n    });\n\n    const viewAllButtonEl = document.querySelector('.view-all-btn') as HTMLElement;\n    viewAllButtonEl.addEventListener('click', () => {\n      window.location.href = `${window.location.origin}/opportunities?similar_jobs=${jobRequisitionId}`;\n    });\n    const similarJobs = groupJobByState(jobs);\n    const similarJobsList = similarJobs[State || '']\n      .filter((job) => job.jobRequisitionId !== id)\n      .filter((d) => d.jobDescription);\n\n    bindSimilarJobs(similarJobsList);\n  } else {\n    console.error('Error fetching jobs');\n  }\n});\n\nconst bindSimilarJobs = (jobs: Job[]) => {\n  //bind location\n  const cards = document.querySelectorAll('.listing-similar-grid-card') as NodeListOf<HTMLElement>;\n  const parser = new DOMParser();\n  cards.forEach((cardsEl: HTMLElement, index: number) => {\n    // location\n    const locationEl = cardsEl.querySelector('.similar-jobs-location') as HTMLElement;\n    const { title, jobDescription, jobRequisitionId, City, State } = jobs[index];\n\n    locationEl.innerHTML = `${City || ''} ${State ? ',' : ''} ${State || ''}`;\n\n    // title\n    const titleElement = cardsEl.querySelector('.similar-jobs-title') as HTMLElement;\n    titleElement.innerHTML = title || '';\n    titleElement.addEventListener('click', () => {\n      window.location.href = `${window.location.origin}/listing?id=${jobRequisitionId}`;\n    });\n\n    // description\n    const descriptionElement = cardsEl.querySelector('.similar-jobs-description') as HTMLElement;\n    descriptionElement.innerHTML = truncate(\n      parser.parseFromString(jobDescription || '', 'text/html').body.innerHTML\n    );\n\n    // read more\n    const readMoreElement = cardsEl.querySelector('.similar-jobs-read-more') as HTMLElement;\n    readMoreElement.addEventListener('click', () => {\n      window.open(`${window.location.origin}/listing?id=${jobRequisitionId}`, '_blank');\n    });\n\n    cardsEl.addEventListener('click', () => {\n      window.location.href = `${window.location.origin}/listing?id=${jobRequisitionId}`;\n    });\n  });\n};\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACAtF,MAAM,SAAS;AAEf,MAAM,YAAY;AAAA,IACvB,gBAAgB,IAAI,MAAM;AAAA,IAC1B,mBAAmB,IAAI,MAAM;AAAA,IAC7B,WAAW,IAAI,MAAM;AAAA,IACrB,OAAO,IAAI,MAAM;AAAA,IACjB,eAAe,IAAI,MAAM;AAAA,IACzB,eAAe,IAAI,MAAM;AAAA,IACzB,YAAY,IAAI,MAAM;AAAA,IACtB,cAAc,IAAI,MAAM;AAAA,IACxB,MAAM,IAAI,MAAM;AAAA,IAChB,OAAO,IAAI,MAAM;AAAA,IACjB,UAAU,IAAI,MAAM;AAAA,IACpB,UAAU,IAAI,MAAM;AAAA,IACpB,OAAO,IAAI,MAAM;AAAA,IACjB,MAAM,IAAI,MAAM;AAAA,IAChB,UAAU,IAAI,MAAM;AAAA,IACpB,aAAa,IAAI,MAAM;AAAA,IACvB,kBAAkB,IAAI,MAAM;AAAA,IAC5B,aAAa,CAAC,gBAAwB,IAAI,MAAM,kBAAkB,WAAW;AAAA,EAC/E;AAuBO,MAAM,aAAa;;;ACnCnB,MAAM,kBAAkB,CAAC,SAA4B;AAC1D,WAAO,mBAAmB,MAAM,OAAO;AAAA,EACzC;AAkDA,MAAM,qBAAqB,CAAC,MAAa,aAAoC;AAC3E,UAAM,cAA0B,CAAC;AACjC,UAAM,qBAAqB,KAAK,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC;AAE7D,uBAAmB,QAAQ,CAAC,QAAQ;AAClC,YAAM,WAAW,IAAI,QAAQ,KAAK;AAClC,UAAI,CAAC,YAAY,QAAQ,GAAG;AAC1B,oBAAY,QAAQ,IAAI,CAAC;AAAA,MAC3B;AACA,kBAAY,QAAQ,EAAE,KAAK,GAAG;AAAA,IAChC,CAAC;AACD,WAAO;AAAA,EACT;AAgDO,MAAM,WAAW,CAAC,OAAe,MAAc,QAAQ;AAC5D,QAAI,MAAM,SAAS,KAAK;AACtB,aAAO,MAAM,UAAU,GAAG,GAAG,IAAI;AAAA,IACnC;AACA,WAAO;AAAA,EACT;;;AC5HO,MAAM,gBAAN,MAAoB;AAAA,IAEzB,cAAc;AACZ,WAAK,OAAO;AAAA,IACd;AAAA,IAEA,MAAa,YAAmC;AAC9C,UAAI,KAAK,MAAM;AACb,eAAO,QAAQ,QAAQ,KAAK,IAAI;AAAA,MAClC;AACA,YAAM,EAAE,aAAa,IAAK,MAAM,KAAK,iBAAiB,KAAM,CAAC;AAC7D,UAAI,cAAc;AAChB,aAAK,OAAO;AAAA,MACd;AAEA,aAAO,QAAQ,QAAQ,KAAK,IAAI;AAAA,IAClC;AAAA,IAEA,MAAc,mBAAgD;AAC5D,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,GAAG,UAAU,MAAM;AAChD,cAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,eAAO;AAAA,MACT,SAAS,OAAO;AACd,gBAAQ,MAAM,uBAAuB,KAAK;AAC1C,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;;;AC3BA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,YAAY;AAC9B,UAAM,gBAAgB,IAAI,cAAc;AACxC,UAAM,OAAO,MAAM,cAAc,UAAU;AAE3C,QAAI,MAAM;AACR,YAAM,cAAc,OAAO,SAAS;AACpC,YAAM,aAAa,IAAI,gBAAgB,WAAW;AAClD,YAAM,KAAK,WAAW,IAAI,IAAI;AAC9B,UAAI,CAAC,IAAI;AACP,gBAAQ,MAAM,uBAAuB;AACrC;AAAA,MACF;AACA,YAAM,MAAM,KAAK,KAAK,CAACA,SAAQA,KAAI,qBAAqB,EAAE;AAC1D,UAAI,CAAC,KAAK;AACR,gBAAQ,MAAM,oBAAoB;AAClC;AAAA,MACF;AACA,YAAM,EAAE,OAAO,UAAU,gBAAgB,kBAAkB,MAAM,MAAM,IAAI;AAE3E,YAAM,eAAe,SAAS,cAAc,UAAU,KAAK;AAC3D,UAAI;AAAc,qBAAa,YAAY,SAAS;AAGpD,YAAM,cAAc,SAAS,cAAc,UAAU,IAAI;AACzD,UAAI;AAAa,oBAAY,YAAY,YAAY;AAGrD,YAAM,kBAAkB,SAAS,cAAc,UAAU,QAAQ;AACjE,UAAI;AACF,wBAAgB,YAAY,GAAG,QAAQ,EAAE,IAAI,QAAQ,MAAM,EAAE,IAAI,SAAS,EAAE;AAG9E,YAAM,qBAAqB,SAAS,cAAc,UAAU,WAAW;AACvE,UAAI;AAAoB,2BAAmB,YAAY,kBAAkB;AAGzE,YAAM,0BAA0B,SAAS,cAAc,UAAU,gBAAgB;AACjF,UAAI;AAAyB,gCAAwB,YAAY,oBAAoB;AAErF,YAAM,eAAe,SAAS,iBAAiB,gBAAgB;AAC/D,mBAAa,QAAQ,CAAC,WAAwB;AAC5C,eAAO,iBAAiB,SAAS,MAAM;AACrC,iBAAO,KAAK,IAAI,oBAAoB,QAAQ;AAAA,QAC9C,CAAC;AAAA,MACH,CAAC;AAED,YAAM,kBAAkB,SAAS,cAAc,eAAe;AAC9D,sBAAgB,iBAAiB,SAAS,MAAM;AAC9C,eAAO,SAAS,OAAO,GAAG,OAAO,SAAS,MAAM,+BAA+B,gBAAgB;AAAA,MACjG,CAAC;AACD,YAAM,cAAc,gBAAgB,IAAI;AACxC,YAAM,kBAAkB,YAAY,SAAS,EAAE,EAC5C,OAAO,CAACA,SAAQA,KAAI,qBAAqB,EAAE,EAC3C,OAAO,CAAC,MAAM,EAAE,cAAc;AAEjC,sBAAgB,eAAe;AAAA,IACjC,OAAO;AACL,cAAQ,MAAM,qBAAqB;AAAA,IACrC;AAAA,EACF,CAAC;AAED,MAAM,kBAAkB,CAAC,SAAgB;AAEvC,UAAM,QAAQ,SAAS,iBAAiB,4BAA4B;AACpE,UAAM,SAAS,IAAI,UAAU;AAC7B,UAAM,QAAQ,CAAC,SAAsB,UAAkB;AAErD,YAAM,aAAa,QAAQ,cAAc,wBAAwB;AACjE,YAAM,EAAE,OAAO,gBAAgB,kBAAkB,MAAM,MAAM,IAAI,KAAK,KAAK;AAE3E,iBAAW,YAAY,GAAG,QAAQ,EAAE,IAAI,QAAQ,MAAM,EAAE,IAAI,SAAS,EAAE;AAGvE,YAAM,eAAe,QAAQ,cAAc,qBAAqB;AAChE,mBAAa,YAAY,SAAS;AAClC,mBAAa,iBAAiB,SAAS,MAAM;AAC3C,eAAO,SAAS,OAAO,GAAG,OAAO,SAAS,MAAM,eAAe,gBAAgB;AAAA,MACjF,CAAC;AAGD,YAAM,qBAAqB,QAAQ,cAAc,2BAA2B;AAC5E,yBAAmB,YAAY;AAAA,QAC7B,OAAO,gBAAgB,kBAAkB,IAAI,WAAW,EAAE,KAAK;AAAA,MACjE;AAGA,YAAM,kBAAkB,QAAQ,cAAc,yBAAyB;AACvE,sBAAgB,iBAAiB,SAAS,MAAM;AAC9C,eAAO,KAAK,GAAG,OAAO,SAAS,MAAM,eAAe,gBAAgB,IAAI,QAAQ;AAAA,MAClF,CAAC;AAED,cAAQ,iBAAiB,SAAS,MAAM;AACtC,eAAO,SAAS,OAAO,GAAG,OAAO,SAAS,MAAM,eAAe,gBAAgB;AAAA,MACjF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;",
  "names": ["job"]
}
